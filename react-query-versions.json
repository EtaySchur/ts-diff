[
  {
    "objectName": "Action",
    "signature": "type Action<TData, TError> = ContinueAction | ErrorAction<TError> | FailedAction | FetchAction | InvalidateAction | PauseAction | SetStateAction<TData, TError> | SuccessAction<TData>",
    "objectType": "type",
    "objectIdentifier": "react-query/Action",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type Action<TData, TError> = ContinueAction | ErrorAction<TError> | FailedAction | FetchAction | InvalidateAction | PauseAction | SetStateAction<TData, TError> | SuccessAction<TData>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type Action",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype Action<TData, TError> = ContinueAction | ErrorAction<TError> | FailedAction | FetchAction | InvalidateAction | PauseAction | SetStateAction<TData, TError> | SuccessAction<TData>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "CancelledError",
    "signature": "class CancelledError",
    "objectType": "class",
    "objectIdentifier": "react-query/CancelledError",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class CancelledError",
    "newSource": "",
    "documentation": "",
    "description": "Removed class CancelledError",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass CancelledError\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "CancelOptions",
    "signature": "interface CancelOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/CancelOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface CancelOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface CancelOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface CancelOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "DataUpdateFunction",
    "signature": "type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput",
    "objectType": "type",
    "objectIdentifier": "react-query/DataUpdateFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput",
    "newSource": "",
    "documentation": "",
    "description": "Removed type DataUpdateFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "DefaultOptions",
    "signature": "interface DefaultOptions<TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/DefaultOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface DefaultOptions<TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface DefaultOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface DefaultOptions<TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "dehydrate",
    "signature": "function dehydrate(client: QueryClient, options: DehydrateOptions): DehydratedState",
    "objectType": "function",
    "objectIdentifier": "react-query/dehydrate",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function dehydrate(client: QueryClient, options: DehydrateOptions): DehydratedState",
    "newSource": "",
    "documentation": "",
    "description": "Removed function dehydrate",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction dehydrate(client: QueryClient, options: DehydrateOptions): DehydratedState\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "DehydratedState",
    "signature": "interface DehydratedState",
    "objectType": "interface",
    "objectIdentifier": "react-query/DehydratedState",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface DehydratedState",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface DehydratedState",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface DehydratedState\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "DehydrateOptions",
    "signature": "interface DehydrateOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/DehydrateOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface DehydrateOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface DehydrateOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface DehydrateOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "difference",
    "signature": "function difference(array1: T[], array2: T[]): T[]",
    "objectType": "function",
    "objectIdentifier": "react-query/difference",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function difference(array1: T[], array2: T[]): T[]",
    "newSource": "",
    "documentation": "",
    "description": "Removed function difference",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction difference(array1: T[], array2: T[]): T[]\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "EnsuredQueryKey",
    "signature": "type EnsuredQueryKey<T> = T extends string ? [T] : Exclude<T, string>",
    "objectType": "type",
    "objectIdentifier": "react-query/EnsuredQueryKey",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type EnsuredQueryKey<T> = T extends string ? [T] : Exclude<T, string>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type EnsuredQueryKey",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype EnsuredQueryKey<T> = T extends string ? [T] : Exclude<T, string>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "ensureQueryKeyArray",
    "signature": "function ensureQueryKeyArray(value: T): EnsuredQueryKey<T>",
    "objectType": "function",
    "objectIdentifier": "react-query/ensureQueryKeyArray",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function ensureQueryKeyArray(value: T): EnsuredQueryKey<T>",
    "newSource": "",
    "documentation": "",
    "description": "Removed function ensureQueryKeyArray",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction ensureQueryKeyArray(value: T): EnsuredQueryKey<T>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FetchContext",
    "signature": "interface FetchContext<TQueryFnData, TError, TData, TQueryKey>",
    "objectType": "interface",
    "objectIdentifier": "react-query/FetchContext",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface FetchContext<TQueryFnData, TError, TData, TQueryKey>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface FetchContext",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface FetchContext<TQueryFnData, TError, TData, TQueryKey>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FetchInfiniteQueryOptions",
    "signature": "interface FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>",
    "objectType": "interface",
    "objectIdentifier": "react-query/FetchInfiniteQueryOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface FetchInfiniteQueryOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FetchNextPageOptions",
    "signature": "interface FetchNextPageOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/FetchNextPageOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface FetchNextPageOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface FetchNextPageOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface FetchNextPageOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FetchOptions",
    "signature": "interface FetchOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/FetchOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface FetchOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface FetchOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface FetchOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FetchPreviousPageOptions",
    "signature": "interface FetchPreviousPageOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/FetchPreviousPageOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface FetchPreviousPageOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface FetchPreviousPageOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface FetchPreviousPageOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FetchQueryOptions",
    "signature": "interface FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>",
    "objectType": "interface",
    "objectIdentifier": "react-query/FetchQueryOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface FetchQueryOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "focusManager",
    "signature": "focusManager: FocusManager",
    "objectType": "variable",
    "objectIdentifier": "react-query/focusManager",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "focusManager: FocusManager",
    "newSource": "",
    "documentation": "",
    "description": "Removed variable focusManager",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfocusManager: FocusManager\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FocusManager",
    "signature": "class FocusManager",
    "objectType": "class",
    "objectIdentifier": "react-query/FocusManager",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class FocusManager",
    "newSource": "",
    "documentation": "",
    "description": "Removed class FocusManager",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass FocusManager\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "functionalUpdate",
    "signature": "function functionalUpdate(updater: Updater<TInput, TOutput>, input: TInput): TOutput",
    "objectType": "function",
    "objectIdentifier": "react-query/functionalUpdate",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function functionalUpdate(updater: Updater<TInput, TOutput>, input: TInput): TOutput",
    "newSource": "",
    "documentation": "",
    "description": "Removed function functionalUpdate",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction functionalUpdate(updater: Updater<TInput, TOutput>, input: TInput): TOutput\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "getAbortController",
    "signature": "function getAbortController(): AbortController",
    "objectType": "function",
    "objectIdentifier": "react-query/getAbortController",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function getAbortController(): AbortController",
    "newSource": "",
    "documentation": "",
    "description": "Removed function getAbortController",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction getAbortController(): AbortController\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "getDefaultState",
    "signature": "function getDefaultState(): MutationState<TData, TError, TVariables, TContext>",
    "objectType": "function",
    "objectIdentifier": "react-query/getDefaultState",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function getDefaultState(): MutationState<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed function getDefaultState",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction getDefaultState(): MutationState<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "getLogger",
    "signature": "function getLogger(): Logger",
    "objectType": "function",
    "objectIdentifier": "react-query/getLogger",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function getLogger(): Logger",
    "newSource": "",
    "documentation": "",
    "description": "Removed function getLogger",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction getLogger(): Logger\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "GetNextPageParamFunction",
    "signature": "type GetNextPageParamFunction<TQueryFnData> = (lastPage: TQueryFnData, allPages: TQueryFnData[]) => unknown",
    "objectType": "type",
    "objectIdentifier": "react-query/GetNextPageParamFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type GetNextPageParamFunction<TQueryFnData> = (lastPage: TQueryFnData, allPages: TQueryFnData[]) => unknown",
    "newSource": "",
    "documentation": "",
    "description": "Removed type GetNextPageParamFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype GetNextPageParamFunction<TQueryFnData> = (lastPage: TQueryFnData, allPages: TQueryFnData[]) => unknown\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "GetPreviousPageParamFunction",
    "signature": "type GetPreviousPageParamFunction<TQueryFnData> = (firstPage: TQueryFnData, allPages: TQueryFnData[]) => unknown",
    "objectType": "type",
    "objectIdentifier": "react-query/GetPreviousPageParamFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type GetPreviousPageParamFunction<TQueryFnData> = (firstPage: TQueryFnData, allPages: TQueryFnData[]) => unknown",
    "newSource": "",
    "documentation": "",
    "description": "Removed type GetPreviousPageParamFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype GetPreviousPageParamFunction<TQueryFnData> = (firstPage: TQueryFnData, allPages: TQueryFnData[]) => unknown\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "hashQueryKey",
    "signature": "function hashQueryKey(queryKey: QueryKey): string",
    "objectType": "function",
    "objectIdentifier": "react-query/hashQueryKey",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function hashQueryKey(queryKey: QueryKey): string",
    "newSource": "",
    "documentation": "",
    "description": "Removed function hashQueryKey",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction hashQueryKey(queryKey: QueryKey): string\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "hashQueryKeyByOptions",
    "signature": "function hashQueryKeyByOptions(queryKey: TQueryKey, options: QueryOptions<any, any, any, TQueryKey>): string",
    "objectType": "function",
    "objectIdentifier": "react-query/hashQueryKeyByOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function hashQueryKeyByOptions(queryKey: TQueryKey, options: QueryOptions<any, any, any, TQueryKey>): string",
    "newSource": "",
    "documentation": "",
    "description": "Removed function hashQueryKeyByOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction hashQueryKeyByOptions(queryKey: TQueryKey, options: QueryOptions<any, any, any, TQueryKey>): string\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "hydrate",
    "signature": "function hydrate(client: QueryClient, dehydratedState: unknown, options: HydrateOptions): void",
    "objectType": "function",
    "objectIdentifier": "react-query/hydrate",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function hydrate(client: QueryClient, dehydratedState: unknown, options: HydrateOptions): void",
    "newSource": "",
    "documentation": "",
    "description": "Removed function hydrate",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction hydrate(client: QueryClient, dehydratedState: unknown, options: HydrateOptions): void\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Hydrate",
    "signature": "Hydrate: ({ children, options, state }: HydrateProps) => React.ReactElement<any, string | ((props: any) => any) | (new (props: any) => React.Component<any, any, any>)>",
    "objectType": "variable",
    "objectIdentifier": "react-query/Hydrate",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "Hydrate: ({ children, options, state }: HydrateProps) => React.ReactElement<any, string | ((props: any) => any) | (new (props: any) => React.Component<any, any, any>)>",
    "newSource": "",
    "documentation": "",
    "description": "Removed variable Hydrate",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nHydrate: ({ children, options, state }: HydrateProps) => React.ReactElement<any, string | ((props: any) => any) | (new (props: any) => React.Component<any, any, any>)>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "HydrateOptions",
    "signature": "interface HydrateOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/HydrateOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface HydrateOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface HydrateOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface HydrateOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "HydrateProps",
    "signature": "interface HydrateProps",
    "objectType": "interface",
    "objectIdentifier": "react-query/HydrateProps",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface HydrateProps",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface HydrateProps",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface HydrateProps\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InfiniteData",
    "signature": "interface InfiniteData<TData>",
    "objectType": "interface",
    "objectIdentifier": "react-query/InfiniteData",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface InfiniteData<TData>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface InfiniteData",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface InfiniteData<TData>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InfiniteQueryObserver",
    "signature": "class InfiniteQueryObserver",
    "objectType": "class",
    "objectIdentifier": "react-query/InfiniteQueryObserver",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class InfiniteQueryObserver",
    "newSource": "",
    "documentation": "",
    "description": "Removed class InfiniteQueryObserver",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass InfiniteQueryObserver\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InfiniteQueryObserverBaseResult",
    "signature": "interface InfiniteQueryObserverBaseResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/InfiniteQueryObserverBaseResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface InfiniteQueryObserverBaseResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface InfiniteQueryObserverBaseResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface InfiniteQueryObserverBaseResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InfiniteQueryObserverIdleResult",
    "signature": "interface InfiniteQueryObserverIdleResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/InfiniteQueryObserverIdleResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface InfiniteQueryObserverIdleResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface InfiniteQueryObserverIdleResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface InfiniteQueryObserverIdleResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InfiniteQueryObserverLoadingErrorResult",
    "signature": "interface InfiniteQueryObserverLoadingErrorResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/InfiniteQueryObserverLoadingErrorResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface InfiniteQueryObserverLoadingErrorResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface InfiniteQueryObserverLoadingErrorResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface InfiniteQueryObserverLoadingErrorResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InfiniteQueryObserverLoadingResult",
    "signature": "interface InfiniteQueryObserverLoadingResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/InfiniteQueryObserverLoadingResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface InfiniteQueryObserverLoadingResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface InfiniteQueryObserverLoadingResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface InfiniteQueryObserverLoadingResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InfiniteQueryObserverOptions",
    "signature": "interface InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>",
    "objectType": "interface",
    "objectIdentifier": "react-query/InfiniteQueryObserverOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface InfiniteQueryObserverOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InfiniteQueryObserverRefetchErrorResult",
    "signature": "interface InfiniteQueryObserverRefetchErrorResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/InfiniteQueryObserverRefetchErrorResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface InfiniteQueryObserverRefetchErrorResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface InfiniteQueryObserverRefetchErrorResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface InfiniteQueryObserverRefetchErrorResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InfiniteQueryObserverResult",
    "signature": "type InfiniteQueryObserverResult<TData, TError> = InfiniteQueryObserverIdleResult<TData, TError> | InfiniteQueryObserverLoadingErrorResult<TData, TError> | InfiniteQueryObserverLoadingResult<TData, TError> | InfiniteQueryObserverRefetchErrorResult<TData, TError> | InfiniteQueryObserverSuccessResult<TData, TError>",
    "objectType": "type",
    "objectIdentifier": "react-query/InfiniteQueryObserverResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type InfiniteQueryObserverResult<TData, TError> = InfiniteQueryObserverIdleResult<TData, TError> | InfiniteQueryObserverLoadingErrorResult<TData, TError> | InfiniteQueryObserverLoadingResult<TData, TError> | InfiniteQueryObserverRefetchErrorResult<TData, TError> | InfiniteQueryObserverSuccessResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type InfiniteQueryObserverResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype InfiniteQueryObserverResult<TData, TError> = InfiniteQueryObserverIdleResult<TData, TError> | InfiniteQueryObserverLoadingErrorResult<TData, TError> | InfiniteQueryObserverLoadingResult<TData, TError> | InfiniteQueryObserverRefetchErrorResult<TData, TError> | InfiniteQueryObserverSuccessResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InfiniteQueryObserverSuccessResult",
    "signature": "interface InfiniteQueryObserverSuccessResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/InfiniteQueryObserverSuccessResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface InfiniteQueryObserverSuccessResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface InfiniteQueryObserverSuccessResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface InfiniteQueryObserverSuccessResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InitialDataFunction",
    "signature": "type InitialDataFunction<T> = () => T | undefined",
    "objectType": "type",
    "objectIdentifier": "react-query/InitialDataFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type InitialDataFunction<T> = () => T | undefined",
    "newSource": "",
    "documentation": "",
    "description": "Removed type InitialDataFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype InitialDataFunction<T> = () => T | undefined\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InvalidateOptions",
    "signature": "interface InvalidateOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/InvalidateOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface InvalidateOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface InvalidateOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface InvalidateOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "InvalidateQueryFilters",
    "signature": "interface InvalidateQueryFilters<TPageData>",
    "objectType": "interface",
    "objectIdentifier": "react-query/InvalidateQueryFilters",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface InvalidateQueryFilters<TPageData>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface InvalidateQueryFilters",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface InvalidateQueryFilters<TPageData>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "isCancelable",
    "signature": "function isCancelable(value: any): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/isCancelable",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function isCancelable(value: any): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function isCancelable",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction isCancelable(value: any): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "isCancelledError",
    "signature": "function isCancelledError(value: any): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/isCancelledError",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function isCancelledError(value: any): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function isCancelledError",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction isCancelledError(value: any): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "isError",
    "signature": "function isError(value: any): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/isError",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function isError(value: any): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function isError",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction isError(value: any): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "isPlainObject",
    "signature": "function isPlainObject(o: any): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/isPlainObject",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function isPlainObject(o: any): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function isPlainObject",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction isPlainObject(o: any): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "isQueryKey",
    "signature": "function isQueryKey(value: any): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/isQueryKey",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function isQueryKey(value: any): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function isQueryKey",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction isQueryKey(value: any): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "isServer",
    "signature": "isServer: boolean",
    "objectType": "variable",
    "objectIdentifier": "react-query/isServer",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "isServer: boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed variable isServer",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nisServer: boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "isValidTimeout",
    "signature": "function isValidTimeout(value: unknown): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/isValidTimeout",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function isValidTimeout(value: unknown): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function isValidTimeout",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction isValidTimeout(value: unknown): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Logger",
    "signature": "interface Logger",
    "objectType": "interface",
    "objectIdentifier": "react-query/Logger",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface Logger",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface Logger",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface Logger\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "mapQueryStatusFilter",
    "signature": "function mapQueryStatusFilter(active: boolean, inactive: boolean): QueryStatusFilter",
    "objectType": "function",
    "objectIdentifier": "react-query/mapQueryStatusFilter",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function mapQueryStatusFilter(active: boolean, inactive: boolean): QueryStatusFilter",
    "newSource": "",
    "documentation": "",
    "description": "Removed function mapQueryStatusFilter",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction mapQueryStatusFilter(active: boolean, inactive: boolean): QueryStatusFilter\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "matchMutation",
    "signature": "function matchMutation(filters: MutationFilters, mutation: Mutation<any, any, void, unknown>): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/matchMutation",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function matchMutation(filters: MutationFilters, mutation: Mutation<any, any, void, unknown>): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function matchMutation",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction matchMutation(filters: MutationFilters, mutation: Mutation<any, any, void, unknown>): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "matchQuery",
    "signature": "function matchQuery(filters: QueryFilters, query: Query<any, any, any, any>): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/matchQuery",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function matchQuery(filters: QueryFilters, query: Query<any, any, any, any>): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function matchQuery",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction matchQuery(filters: QueryFilters, query: Query<any, any, any, any>): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutateFunction",
    "signature": "type MutateFunction<TData, TError, TVariables, TContext> = (variables: TVariables, options?: MutateOptions<TData, TError, TVariables, TContext>) => Promise<TData>",
    "objectType": "type",
    "objectIdentifier": "react-query/MutateFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type MutateFunction<TData, TError, TVariables, TContext> = (variables: TVariables, options?: MutateOptions<TData, TError, TVariables, TContext>) => Promise<TData>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type MutateFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype MutateFunction<TData, TError, TVariables, TContext> = (variables: TVariables, options?: MutateOptions<TData, TError, TVariables, TContext>) => Promise<TData>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutateOptions",
    "signature": "interface MutateOptions<TData, TError, TVariables, TContext>",
    "objectType": "interface",
    "objectIdentifier": "react-query/MutateOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface MutateOptions<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface MutateOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface MutateOptions<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Mutation",
    "signature": "class Mutation",
    "objectType": "class",
    "objectIdentifier": "react-query/Mutation",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class Mutation",
    "newSource": "",
    "documentation": "",
    "description": "Removed class Mutation",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass Mutation\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationCache",
    "signature": "class MutationCache",
    "objectType": "class",
    "objectIdentifier": "react-query/MutationCache",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class MutationCache",
    "newSource": "",
    "documentation": "",
    "description": "Removed class MutationCache",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass MutationCache\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationFilters",
    "signature": "interface MutationFilters",
    "objectType": "interface",
    "objectIdentifier": "react-query/MutationFilters",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface MutationFilters",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface MutationFilters",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface MutationFilters\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationFunction",
    "signature": "type MutationFunction<TData, TVariables> = (variables: TVariables) => Promise<TData>",
    "objectType": "type",
    "objectIdentifier": "react-query/MutationFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type MutationFunction<TData, TVariables> = (variables: TVariables) => Promise<TData>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type MutationFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype MutationFunction<TData, TVariables> = (variables: TVariables) => Promise<TData>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationKey",
    "signature": "type MutationKey = string | readonly unknown[]",
    "objectType": "type",
    "objectIdentifier": "react-query/MutationKey",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type MutationKey = string | readonly unknown[]",
    "newSource": "",
    "documentation": "",
    "description": "Removed type MutationKey",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype MutationKey = string | readonly unknown[]\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationMeta",
    "signature": "type MutationMeta = Record<string, unknown>",
    "objectType": "type",
    "objectIdentifier": "react-query/MutationMeta",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type MutationMeta = Record<string, unknown>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type MutationMeta",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype MutationMeta = Record<string, unknown>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationObserver",
    "signature": "class MutationObserver",
    "objectType": "class",
    "objectIdentifier": "react-query/MutationObserver",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class MutationObserver",
    "newSource": "",
    "documentation": "",
    "description": "Removed class MutationObserver",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass MutationObserver\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationObserverBaseResult",
    "signature": "interface MutationObserverBaseResult<TData, TError, TVariables, TContext>",
    "objectType": "interface",
    "objectIdentifier": "react-query/MutationObserverBaseResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface MutationObserverBaseResult<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface MutationObserverBaseResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface MutationObserverBaseResult<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationObserverErrorResult",
    "signature": "interface MutationObserverErrorResult<TData, TError, TVariables, TContext>",
    "objectType": "interface",
    "objectIdentifier": "react-query/MutationObserverErrorResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface MutationObserverErrorResult<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface MutationObserverErrorResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface MutationObserverErrorResult<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationObserverIdleResult",
    "signature": "interface MutationObserverIdleResult<TData, TError, TVariables, TContext>",
    "objectType": "interface",
    "objectIdentifier": "react-query/MutationObserverIdleResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface MutationObserverIdleResult<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface MutationObserverIdleResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface MutationObserverIdleResult<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationObserverLoadingResult",
    "signature": "interface MutationObserverLoadingResult<TData, TError, TVariables, TContext>",
    "objectType": "interface",
    "objectIdentifier": "react-query/MutationObserverLoadingResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface MutationObserverLoadingResult<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface MutationObserverLoadingResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface MutationObserverLoadingResult<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationObserverOptions",
    "signature": "interface MutationObserverOptions<TData, TError, TVariables, TContext>",
    "objectType": "interface",
    "objectIdentifier": "react-query/MutationObserverOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface MutationObserverOptions<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface MutationObserverOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface MutationObserverOptions<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationObserverResult",
    "signature": "type MutationObserverResult<TData, TError, TVariables, TContext> = MutationObserverIdleResult<TData, TError, TVariables, TContext> | MutationObserverLoadingResult<TData, TError, TVariables, TContext> | MutationObserverErrorResult<TData, TError, TVariables, TContext> | MutationObserverSuccessResult<TData, TError, TVariables, TContext>",
    "objectType": "type",
    "objectIdentifier": "react-query/MutationObserverResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type MutationObserverResult<TData, TError, TVariables, TContext> = MutationObserverIdleResult<TData, TError, TVariables, TContext> | MutationObserverLoadingResult<TData, TError, TVariables, TContext> | MutationObserverErrorResult<TData, TError, TVariables, TContext> | MutationObserverSuccessResult<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type MutationObserverResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype MutationObserverResult<TData, TError, TVariables, TContext> = MutationObserverIdleResult<TData, TError, TVariables, TContext> | MutationObserverLoadingResult<TData, TError, TVariables, TContext> | MutationObserverErrorResult<TData, TError, TVariables, TContext> | MutationObserverSuccessResult<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationObserverSuccessResult",
    "signature": "interface MutationObserverSuccessResult<TData, TError, TVariables, TContext>",
    "objectType": "interface",
    "objectIdentifier": "react-query/MutationObserverSuccessResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface MutationObserverSuccessResult<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface MutationObserverSuccessResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface MutationObserverSuccessResult<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationOptions",
    "signature": "interface MutationOptions<TData, TError, TVariables, TContext>",
    "objectType": "interface",
    "objectIdentifier": "react-query/MutationOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface MutationOptions<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface MutationOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface MutationOptions<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationState",
    "signature": "interface MutationState<TData, TError, TVariables, TContext>",
    "objectType": "interface",
    "objectIdentifier": "react-query/MutationState",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface MutationState<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface MutationState",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface MutationState<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "MutationStatus",
    "signature": "type MutationStatus = 'idle' | 'loading' | 'success' | 'error'",
    "objectType": "type",
    "objectIdentifier": "react-query/MutationStatus",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type MutationStatus = 'idle' | 'loading' | 'success' | 'error'",
    "newSource": "",
    "documentation": "",
    "description": "Removed type MutationStatus",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype MutationStatus = 'idle' | 'loading' | 'success' | 'error'\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "noop",
    "signature": "function noop(): undefined",
    "objectType": "function",
    "objectIdentifier": "react-query/noop",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function noop(): undefined",
    "newSource": "",
    "documentation": "",
    "description": "Removed function noop",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction noop(): undefined\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "notifyManager",
    "signature": "notifyManager: NotifyManager",
    "objectType": "variable",
    "objectIdentifier": "react-query/notifyManager",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "notifyManager: NotifyManager",
    "newSource": "",
    "documentation": "",
    "description": "Removed variable notifyManager",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nnotifyManager: NotifyManager\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "NotifyManager",
    "signature": "class NotifyManager",
    "objectType": "class",
    "objectIdentifier": "react-query/NotifyManager",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class NotifyManager",
    "newSource": "",
    "documentation": "",
    "description": "Removed class NotifyManager",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass NotifyManager\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "NotifyOptions",
    "signature": "interface NotifyOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/NotifyOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface NotifyOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface NotifyOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface NotifyOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "ObserverFetchOptions",
    "signature": "interface ObserverFetchOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/ObserverFetchOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface ObserverFetchOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface ObserverFetchOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface ObserverFetchOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "onlineManager",
    "signature": "onlineManager: OnlineManager",
    "objectType": "variable",
    "objectIdentifier": "react-query/onlineManager",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "onlineManager: OnlineManager",
    "newSource": "",
    "documentation": "",
    "description": "Removed variable onlineManager",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nonlineManager: OnlineManager\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "OnlineManager",
    "signature": "class OnlineManager",
    "objectType": "class",
    "objectIdentifier": "react-query/OnlineManager",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class OnlineManager",
    "newSource": "",
    "documentation": "",
    "description": "Removed class OnlineManager",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass OnlineManager\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "parseFilterArgs",
    "signature": "function parseFilterArgs(arg1: TFilters | QueryKey, arg2: TFilters | TOptions, arg3: TOptions): [TFilters, TOptions]",
    "objectType": "function",
    "objectIdentifier": "react-query/parseFilterArgs",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function parseFilterArgs(arg1: TFilters | QueryKey, arg2: TFilters | TOptions, arg3: TOptions): [TFilters, TOptions]",
    "newSource": "",
    "documentation": "",
    "description": "Removed function parseFilterArgs",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction parseFilterArgs(arg1: TFilters | QueryKey, arg2: TFilters | TOptions, arg3: TOptions): [TFilters, TOptions]\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "parseMutationArgs",
    "signature": "function parseMutationArgs(arg1: TOptions | MutationKey | MutationFunction<any, any>, arg2: TOptions | MutationFunction<any, any>, arg3: TOptions): TOptions",
    "objectType": "function",
    "objectIdentifier": "react-query/parseMutationArgs",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function parseMutationArgs(arg1: TOptions | MutationKey | MutationFunction<any, any>, arg2: TOptions | MutationFunction<any, any>, arg3: TOptions): TOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed function parseMutationArgs",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction parseMutationArgs(arg1: TOptions | MutationKey | MutationFunction<any, any>, arg2: TOptions | MutationFunction<any, any>, arg3: TOptions): TOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "parseMutationFilterArgs",
    "signature": "function parseMutationFilterArgs(arg1: MutationFilters | QueryKey, arg2: MutationFilters): MutationFilters",
    "objectType": "function",
    "objectIdentifier": "react-query/parseMutationFilterArgs",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function parseMutationFilterArgs(arg1: MutationFilters | QueryKey, arg2: MutationFilters): MutationFilters",
    "newSource": "",
    "documentation": "",
    "description": "Removed function parseMutationFilterArgs",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction parseMutationFilterArgs(arg1: MutationFilters | QueryKey, arg2: MutationFilters): MutationFilters\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "parseQueryArgs",
    "signature": "function parseQueryArgs(arg1: TOptions | TQueryKey, arg2: TOptions | QueryFunction<any, TQueryKey>, arg3: TOptions): TOptions",
    "objectType": "function",
    "objectIdentifier": "react-query/parseQueryArgs",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function parseQueryArgs(arg1: TOptions | TQueryKey, arg2: TOptions | QueryFunction<any, TQueryKey>, arg3: TOptions): TOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed function parseQueryArgs",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction parseQueryArgs(arg1: TOptions | TQueryKey, arg2: TOptions | QueryFunction<any, TQueryKey>, arg3: TOptions): TOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "partialDeepEqual",
    "signature": "function partialDeepEqual(a: any, b: any): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/partialDeepEqual",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function partialDeepEqual(a: any, b: any): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function partialDeepEqual",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction partialDeepEqual(a: any, b: any): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "partialMatchKey",
    "signature": "function partialMatchKey(a: QueryKey, b: QueryKey): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/partialMatchKey",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function partialMatchKey(a: QueryKey, b: QueryKey): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function partialMatchKey",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction partialMatchKey(a: QueryKey, b: QueryKey): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "PlaceholderDataFunction",
    "signature": "type PlaceholderDataFunction<TResult> = () => TResult | undefined",
    "objectType": "type",
    "objectIdentifier": "react-query/PlaceholderDataFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type PlaceholderDataFunction<TResult> = () => TResult | undefined",
    "newSource": "",
    "documentation": "",
    "description": "Removed type PlaceholderDataFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype PlaceholderDataFunction<TResult> = () => TResult | undefined\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueriesObserver",
    "signature": "class QueriesObserver",
    "objectType": "class",
    "objectIdentifier": "react-query/QueriesObserver",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class QueriesObserver",
    "newSource": "",
    "documentation": "",
    "description": "Removed class QueriesObserver",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass QueriesObserver\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueriesOptions",
    "signature": "type QueriesOptions<T, Result, Depth> = Depth['length'] extends MAXIMUM_DEPTH ? UseQueryOptions[] : T extends [] ? [] : T extends [infer Head] ? [...Result, GetOptions<Head>] : T extends [infer Head, ...infer Tail] ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]> : unknown[] extends T ? T : T extends UseQueryOptions<infer TQueryFnData, infer TError, infer TData, infer TQueryKey>[] ? UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>[] : UseQueryOptions[]",
    "objectType": "type",
    "objectIdentifier": "react-query/QueriesOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type QueriesOptions<T, Result, Depth> = Depth['length'] extends MAXIMUM_DEPTH ? UseQueryOptions[] : T extends [] ? [] : T extends [infer Head] ? [...Result, GetOptions<Head>] : T extends [infer Head, ...infer Tail] ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]> : unknown[] extends T ? T : T extends UseQueryOptions<infer TQueryFnData, infer TError, infer TData, infer TQueryKey>[] ? UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>[] : UseQueryOptions[]",
    "newSource": "",
    "documentation": "",
    "description": "Removed type QueriesOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype QueriesOptions<T, Result, Depth> = Depth['length'] extends MAXIMUM_DEPTH ? UseQueryOptions[] : T extends [] ? [] : T extends [infer Head] ? [...Result, GetOptions<Head>] : T extends [infer Head, ...infer Tail] ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]> : unknown[] extends T ? T : T extends UseQueryOptions<infer TQueryFnData, infer TError, infer TData, infer TQueryKey>[] ? UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>[] : UseQueryOptions[]\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueriesResults",
    "signature": "type QueriesResults<T, Result, Depth> = Depth['length'] extends MAXIMUM_DEPTH ? UseQueryResult[] : T extends [] ? [] : T extends [infer Head] ? [...Result, GetResults<Head>] : T extends [infer Head, ...infer Tail] ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]> : T extends UseQueryOptions<infer TQueryFnData, infer TError, infer TData, any>[] ? UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[] : UseQueryResult[]",
    "objectType": "type",
    "objectIdentifier": "react-query/QueriesResults",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type QueriesResults<T, Result, Depth> = Depth['length'] extends MAXIMUM_DEPTH ? UseQueryResult[] : T extends [] ? [] : T extends [infer Head] ? [...Result, GetResults<Head>] : T extends [infer Head, ...infer Tail] ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]> : T extends UseQueryOptions<infer TQueryFnData, infer TError, infer TData, any>[] ? UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[] : UseQueryResult[]",
    "newSource": "",
    "documentation": "",
    "description": "Removed type QueriesResults",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype QueriesResults<T, Result, Depth> = Depth['length'] extends MAXIMUM_DEPTH ? UseQueryResult[] : T extends [] ? [] : T extends [infer Head] ? [...Result, GetResults<Head>] : T extends [infer Head, ...infer Tail] ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]> : T extends UseQueryOptions<infer TQueryFnData, infer TError, infer TData, any>[] ? UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[] : UseQueryResult[]\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Query",
    "signature": "class Query",
    "objectType": "class",
    "objectIdentifier": "react-query/Query",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class Query",
    "newSource": "",
    "documentation": "",
    "description": "Removed class Query",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass Query\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryBehavior",
    "signature": "interface QueryBehavior<TQueryFnData, TError, TData, TQueryKey>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryBehavior",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryBehavior<TQueryFnData, TError, TData, TQueryKey>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryBehavior",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryBehavior<TQueryFnData, TError, TData, TQueryKey>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryCache",
    "signature": "class QueryCache",
    "objectType": "class",
    "objectIdentifier": "react-query/QueryCache",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class QueryCache",
    "newSource": "",
    "documentation": "",
    "description": "Removed class QueryCache",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass QueryCache\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryClient",
    "signature": "class QueryClient",
    "objectType": "class",
    "objectIdentifier": "react-query/QueryClient",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class QueryClient",
    "newSource": "",
    "documentation": "",
    "description": "Removed class QueryClient",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass QueryClient\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryClientConfig",
    "signature": "interface QueryClientConfig",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryClientConfig",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryClientConfig",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryClientConfig",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryClientConfig\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryClientProvider",
    "signature": "QueryClientProvider: ({ client, contextSharing, children, }: QueryClientProviderProps) => JSX.Element",
    "objectType": "variable",
    "objectIdentifier": "react-query/QueryClientProvider",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "QueryClientProvider: ({ client, contextSharing, children, }: QueryClientProviderProps) => JSX.Element",
    "newSource": "",
    "documentation": "",
    "description": "Removed variable QueryClientProvider",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nQueryClientProvider: ({ client, contextSharing, children, }: QueryClientProviderProps) => JSX.Element\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryClientProviderProps",
    "signature": "interface QueryClientProviderProps",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryClientProviderProps",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryClientProviderProps",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryClientProviderProps",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryClientProviderProps\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryErrorResetBoundary",
    "signature": "QueryErrorResetBoundary: ({ children, }: QueryErrorResetBoundaryProps) => JSX.Element",
    "objectType": "variable",
    "objectIdentifier": "react-query/QueryErrorResetBoundary",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "QueryErrorResetBoundary: ({ children, }: QueryErrorResetBoundaryProps) => JSX.Element",
    "newSource": "",
    "documentation": "",
    "description": "Removed variable QueryErrorResetBoundary",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nQueryErrorResetBoundary: ({ children, }: QueryErrorResetBoundaryProps) => JSX.Element\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryErrorResetBoundaryProps",
    "signature": "interface QueryErrorResetBoundaryProps",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryErrorResetBoundaryProps",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryErrorResetBoundaryProps",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryErrorResetBoundaryProps",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryErrorResetBoundaryProps\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryFilters",
    "signature": "interface QueryFilters",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryFilters",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryFilters",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryFilters",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryFilters\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryFunction",
    "signature": "type QueryFunction<T, TQueryKey> = (context: QueryFunctionContext<TQueryKey>) => T | Promise<T>",
    "objectType": "type",
    "objectIdentifier": "react-query/QueryFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type QueryFunction<T, TQueryKey> = (context: QueryFunctionContext<TQueryKey>) => T | Promise<T>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type QueryFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype QueryFunction<T, TQueryKey> = (context: QueryFunctionContext<TQueryKey>) => T | Promise<T>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryFunctionContext",
    "signature": "interface QueryFunctionContext<TQueryKey, TPageParam>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryFunctionContext",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryFunctionContext<TQueryKey, TPageParam>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryFunctionContext",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryFunctionContext<TQueryKey, TPageParam>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryKey",
    "signature": "type QueryKey = string | readonly unknown[]",
    "objectType": "type",
    "objectIdentifier": "react-query/QueryKey",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type QueryKey = string | readonly unknown[]",
    "newSource": "",
    "documentation": "",
    "description": "Removed type QueryKey",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype QueryKey = string | readonly unknown[]\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryKeyHashFunction",
    "signature": "type QueryKeyHashFunction<TQueryKey> = (queryKey: TQueryKey) => string",
    "objectType": "type",
    "objectIdentifier": "react-query/QueryKeyHashFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type QueryKeyHashFunction<TQueryKey> = (queryKey: TQueryKey) => string",
    "newSource": "",
    "documentation": "",
    "description": "Removed type QueryKeyHashFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype QueryKeyHashFunction<TQueryKey> = (queryKey: TQueryKey) => string\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryMeta",
    "signature": "type QueryMeta = Record<string, unknown>",
    "objectType": "type",
    "objectIdentifier": "react-query/QueryMeta",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type QueryMeta = Record<string, unknown>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type QueryMeta",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype QueryMeta = Record<string, unknown>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryObserver",
    "signature": "class QueryObserver",
    "objectType": "class",
    "objectIdentifier": "react-query/QueryObserver",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class QueryObserver",
    "newSource": "",
    "documentation": "",
    "description": "Removed class QueryObserver",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass QueryObserver\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryObserverBaseResult",
    "signature": "interface QueryObserverBaseResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryObserverBaseResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryObserverBaseResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryObserverBaseResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryObserverBaseResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryObserverIdleResult",
    "signature": "interface QueryObserverIdleResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryObserverIdleResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryObserverIdleResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryObserverIdleResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryObserverIdleResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryObserverLoadingErrorResult",
    "signature": "interface QueryObserverLoadingErrorResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryObserverLoadingErrorResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryObserverLoadingErrorResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryObserverLoadingErrorResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryObserverLoadingErrorResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryObserverLoadingResult",
    "signature": "interface QueryObserverLoadingResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryObserverLoadingResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryObserverLoadingResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryObserverLoadingResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryObserverLoadingResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryObserverOptions",
    "signature": "interface QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryObserverOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryObserverOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryObserverRefetchErrorResult",
    "signature": "interface QueryObserverRefetchErrorResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryObserverRefetchErrorResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryObserverRefetchErrorResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryObserverRefetchErrorResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryObserverRefetchErrorResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryObserverResult",
    "signature": "type QueryObserverResult<TData, TError> = QueryObserverIdleResult<TData, TError> | QueryObserverLoadingErrorResult<TData, TError> | QueryObserverLoadingResult<TData, TError> | QueryObserverRefetchErrorResult<TData, TError> | QueryObserverSuccessResult<TData, TError>",
    "objectType": "type",
    "objectIdentifier": "react-query/QueryObserverResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type QueryObserverResult<TData, TError> = QueryObserverIdleResult<TData, TError> | QueryObserverLoadingErrorResult<TData, TError> | QueryObserverLoadingResult<TData, TError> | QueryObserverRefetchErrorResult<TData, TError> | QueryObserverSuccessResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type QueryObserverResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype QueryObserverResult<TData, TError> = QueryObserverIdleResult<TData, TError> | QueryObserverLoadingErrorResult<TData, TError> | QueryObserverLoadingResult<TData, TError> | QueryObserverRefetchErrorResult<TData, TError> | QueryObserverSuccessResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryObserverSuccessResult",
    "signature": "interface QueryObserverSuccessResult<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryObserverSuccessResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryObserverSuccessResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryObserverSuccessResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryObserverSuccessResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryOptions",
    "signature": "interface QueryOptions<TQueryFnData, TError, TData, TQueryKey>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryOptions<TQueryFnData, TError, TData, TQueryKey>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryState",
    "signature": "interface QueryState<TData, TError>",
    "objectType": "interface",
    "objectIdentifier": "react-query/QueryState",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface QueryState<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface QueryState",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface QueryState<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryStatus",
    "signature": "type QueryStatus = 'idle' | 'loading' | 'error' | 'success'",
    "objectType": "type",
    "objectIdentifier": "react-query/QueryStatus",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type QueryStatus = 'idle' | 'loading' | 'error' | 'success'",
    "newSource": "",
    "documentation": "",
    "description": "Removed type QueryStatus",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype QueryStatus = 'idle' | 'loading' | 'error' | 'success'\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "QueryStatusFilter",
    "signature": "type QueryStatusFilter = 'all' | 'active' | 'inactive' | 'none'",
    "objectType": "type",
    "objectIdentifier": "react-query/QueryStatusFilter",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type QueryStatusFilter = 'all' | 'active' | 'inactive' | 'none'",
    "newSource": "",
    "documentation": "",
    "description": "Removed type QueryStatusFilter",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype QueryStatusFilter = 'all' | 'active' | 'inactive' | 'none'\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "RefetchOptions",
    "signature": "interface RefetchOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/RefetchOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface RefetchOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface RefetchOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface RefetchOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "RefetchPageFilters",
    "signature": "interface RefetchPageFilters<TPageData>",
    "objectType": "interface",
    "objectIdentifier": "react-query/RefetchPageFilters",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface RefetchPageFilters<TPageData>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface RefetchPageFilters",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface RefetchPageFilters<TPageData>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "RefetchQueryFilters",
    "signature": "interface RefetchQueryFilters<TPageData>",
    "objectType": "interface",
    "objectIdentifier": "react-query/RefetchQueryFilters",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface RefetchQueryFilters<TPageData>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface RefetchQueryFilters",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface RefetchQueryFilters<TPageData>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "replaceAt",
    "signature": "function replaceAt(array: T[], index: number, value: T): T[]",
    "objectType": "function",
    "objectIdentifier": "react-query/replaceAt",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function replaceAt(array: T[], index: number, value: T): T[]",
    "newSource": "",
    "documentation": "",
    "description": "Removed function replaceAt",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction replaceAt(array: T[], index: number, value: T): T[]\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "replaceEqualDeep",
    "signature": "function replaceEqualDeep(a: unknown, b: T): T",
    "objectType": "function",
    "objectIdentifier": "react-query/replaceEqualDeep",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function replaceEqualDeep(a: unknown, b: T): T",
    "newSource": "",
    "documentation": "",
    "description": "Removed function replaceEqualDeep",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction replaceEqualDeep(a: unknown, b: T): T\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "ResetOptions",
    "signature": "interface ResetOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/ResetOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface ResetOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface ResetOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface ResetOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "ResetQueryFilters",
    "signature": "interface ResetQueryFilters<TPageData>",
    "objectType": "interface",
    "objectIdentifier": "react-query/ResetQueryFilters",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface ResetQueryFilters<TPageData>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface ResetQueryFilters",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface ResetQueryFilters<TPageData>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "ResultOptions",
    "signature": "interface ResultOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/ResultOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface ResultOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface ResultOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface ResultOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "RetryDelayValue",
    "signature": "type RetryDelayValue<TError> = number | RetryDelayFunction<TError>",
    "objectType": "type",
    "objectIdentifier": "react-query/RetryDelayValue",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type RetryDelayValue<TError> = number | RetryDelayFunction<TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type RetryDelayValue",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Retryer",
    "signature": "class Retryer",
    "objectType": "class",
    "objectIdentifier": "react-query/Retryer",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class Retryer",
    "newSource": "",
    "documentation": "",
    "description": "Removed class Retryer",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass Retryer\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "RetryValue",
    "signature": "type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>",
    "objectType": "type",
    "objectIdentifier": "react-query/RetryValue",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type RetryValue",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "scheduleMicrotask",
    "signature": "function scheduleMicrotask(callback: () => void): void",
    "objectType": "function",
    "objectIdentifier": "react-query/scheduleMicrotask",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function scheduleMicrotask(callback: () => void): void",
    "newSource": "",
    "documentation": "",
    "description": "Removed function scheduleMicrotask",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction scheduleMicrotask(callback: () => void): void\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "SetDataOptions",
    "signature": "interface SetDataOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/SetDataOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface SetDataOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface SetDataOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface SetDataOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "setLogger",
    "signature": "function setLogger(newLogger: Logger): void",
    "objectType": "function",
    "objectIdentifier": "react-query/setLogger",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function setLogger(newLogger: Logger): void",
    "newSource": "",
    "documentation": "",
    "description": "Removed function setLogger",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction setLogger(newLogger: Logger): void\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "SetStateOptions",
    "signature": "interface SetStateOptions",
    "objectType": "interface",
    "objectIdentifier": "react-query/SetStateOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface SetStateOptions",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface SetStateOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface SetStateOptions\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "shallowEqualObjects",
    "signature": "function shallowEqualObjects(a: T, b: T): boolean",
    "objectType": "function",
    "objectIdentifier": "react-query/shallowEqualObjects",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function shallowEqualObjects(a: T, b: T): boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed function shallowEqualObjects",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction shallowEqualObjects(a: T, b: T): boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "ShouldDehydrateMutationFunction",
    "signature": "type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean",
    "objectType": "type",
    "objectIdentifier": "react-query/ShouldDehydrateMutationFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed type ShouldDehydrateMutationFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "ShouldDehydrateQueryFunction",
    "signature": "type ShouldDehydrateQueryFunction = (query: Query) => boolean",
    "objectType": "type",
    "objectIdentifier": "react-query/ShouldDehydrateQueryFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type ShouldDehydrateQueryFunction = (query: Query) => boolean",
    "newSource": "",
    "documentation": "",
    "description": "Removed type ShouldDehydrateQueryFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype ShouldDehydrateQueryFunction = (query: Query) => boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "sleep",
    "signature": "function sleep(timeout: number): Promise<void>",
    "objectType": "function",
    "objectIdentifier": "react-query/sleep",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function sleep(timeout: number): Promise<void>",
    "newSource": "",
    "documentation": "",
    "description": "Removed function sleep",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction sleep(timeout: number): Promise<void>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "stableValueHash",
    "signature": "function stableValueHash(value: any): string",
    "objectType": "function",
    "objectIdentifier": "react-query/stableValueHash",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function stableValueHash(value: any): string",
    "newSource": "",
    "documentation": "",
    "description": "Removed function stableValueHash",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction stableValueHash(value: any): string\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "timeUntilStale",
    "signature": "function timeUntilStale(updatedAt: number, staleTime: number): number",
    "objectType": "function",
    "objectIdentifier": "react-query/timeUntilStale",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function timeUntilStale(updatedAt: number, staleTime: number): number",
    "newSource": "",
    "documentation": "",
    "description": "Removed function timeUntilStale",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction timeUntilStale(updatedAt: number, staleTime: number): number\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Updater",
    "signature": "type Updater<TInput, TOutput> = TOutput | DataUpdateFunction<TInput, TOutput>",
    "objectType": "type",
    "objectIdentifier": "react-query/Updater",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type Updater<TInput, TOutput> = TOutput | DataUpdateFunction<TInput, TOutput>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type Updater",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype Updater<TInput, TOutput> = TOutput | DataUpdateFunction<TInput, TOutput>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseBaseMutationResult",
    "signature": "type UseBaseMutationResult<TData, TError, TVariables, TContext> = Override<MutationObserverResult<TData, TError, TVariables, TContext>, { mutate: UseMutateFunction<TData, TError, TVariables, TContext>; }> & { mutateAsync: UseMutateAsyncFunction<TData, TError, TVariables, TContext>; }",
    "objectType": "type",
    "objectIdentifier": "react-query/UseBaseMutationResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type UseBaseMutationResult<TData, TError, TVariables, TContext> = Override<MutationObserverResult<TData, TError, TVariables, TContext>, { mutate: UseMutateFunction<TData, TError, TVariables, TContext>; }> & { mutateAsync: UseMutateAsyncFunction<TData, TError, TVariables, TContext>; }",
    "newSource": "",
    "documentation": "",
    "description": "Removed type UseBaseMutationResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype UseBaseMutationResult<TData, TError, TVariables, TContext> = Override<MutationObserverResult<TData, TError, TVariables, TContext>, { mutate: UseMutateFunction<TData, TError, TVariables, TContext>; }> & { mutateAsync: UseMutateAsyncFunction<TData, TError, TVariables, TContext>; }\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseBaseQueryOptions",
    "signature": "interface UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>",
    "objectType": "interface",
    "objectIdentifier": "react-query/UseBaseQueryOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface UseBaseQueryOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseBaseQueryResult",
    "signature": "type UseBaseQueryResult<TData, TError> = QueryObserverResult<TData, TError>",
    "objectType": "type",
    "objectIdentifier": "react-query/UseBaseQueryResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type UseBaseQueryResult<TData, TError> = QueryObserverResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type UseBaseQueryResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype UseBaseQueryResult<TData, TError> = QueryObserverResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useHydrate",
    "signature": "function useHydrate(state: unknown, options: HydrateOptions): void",
    "objectType": "function",
    "objectIdentifier": "react-query/useHydrate",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function useHydrate(state: unknown, options: HydrateOptions): void",
    "newSource": "",
    "documentation": "",
    "description": "Removed function useHydrate",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction useHydrate(state: unknown, options: HydrateOptions): void\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useInfiniteQuery",
    "signature": "function useInfiniteQuery(options: UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>): UseInfiniteQueryResult<TData, TError>",
    "objectType": "function",
    "objectIdentifier": "react-query/useInfiniteQuery",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function useInfiniteQuery(options: UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>): UseInfiniteQueryResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed function useInfiniteQuery",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction useInfiniteQuery(options: UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>): UseInfiniteQueryResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseInfiniteQueryOptions",
    "signature": "interface UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>",
    "objectType": "interface",
    "objectIdentifier": "react-query/UseInfiniteQueryOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface UseInfiniteQueryOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseInfiniteQueryResult",
    "signature": "type UseInfiniteQueryResult<TData, TError> = InfiniteQueryObserverResult<TData, TError>",
    "objectType": "type",
    "objectIdentifier": "react-query/UseInfiniteQueryResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type UseInfiniteQueryResult<TData, TError> = InfiniteQueryObserverResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type UseInfiniteQueryResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype UseInfiniteQueryResult<TData, TError> = InfiniteQueryObserverResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useIsFetching",
    "signature": "function useIsFetching(filters: QueryFilters): number",
    "objectType": "function",
    "objectIdentifier": "react-query/useIsFetching",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function useIsFetching(filters: QueryFilters): number",
    "newSource": "",
    "documentation": "",
    "description": "Removed function useIsFetching",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction useIsFetching(filters: QueryFilters): number\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useIsMutating",
    "signature": "function useIsMutating(filters: MutationFilters): number",
    "objectType": "function",
    "objectIdentifier": "react-query/useIsMutating",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function useIsMutating(filters: MutationFilters): number",
    "newSource": "",
    "documentation": "",
    "description": "Removed function useIsMutating",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction useIsMutating(filters: MutationFilters): number\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseMutateAsyncFunction",
    "signature": "type UseMutateAsyncFunction<TData, TError, TVariables, TContext> = MutateFunction<TData, TError, TVariables, TContext>",
    "objectType": "type",
    "objectIdentifier": "react-query/UseMutateAsyncFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type UseMutateAsyncFunction<TData, TError, TVariables, TContext> = MutateFunction<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type UseMutateAsyncFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype UseMutateAsyncFunction<TData, TError, TVariables, TContext> = MutateFunction<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseMutateFunction",
    "signature": "type UseMutateFunction<TData, TError, TVariables, TContext> = (...args: Parameters<MutateFunction<TData, TError, TVariables, TContext>>) => void",
    "objectType": "type",
    "objectIdentifier": "react-query/UseMutateFunction",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type UseMutateFunction<TData, TError, TVariables, TContext> = (...args: Parameters<MutateFunction<TData, TError, TVariables, TContext>>) => void",
    "newSource": "",
    "documentation": "",
    "description": "Removed type UseMutateFunction",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype UseMutateFunction<TData, TError, TVariables, TContext> = (...args: Parameters<MutateFunction<TData, TError, TVariables, TContext>>) => void\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useMutation",
    "signature": "function useMutation(options: UseMutationOptions<TData, TError, TVariables, TContext>): UseMutationResult<TData, TError, TVariables, TContext>",
    "objectType": "function",
    "objectIdentifier": "react-query/useMutation",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function useMutation(options: UseMutationOptions<TData, TError, TVariables, TContext>): UseMutationResult<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed function useMutation",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction useMutation(options: UseMutationOptions<TData, TError, TVariables, TContext>): UseMutationResult<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseMutationOptions",
    "signature": "interface UseMutationOptions<TData, TError, TVariables, TContext>",
    "objectType": "interface",
    "objectIdentifier": "react-query/UseMutationOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface UseMutationOptions<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface UseMutationOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface UseMutationOptions<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseMutationResult",
    "signature": "type UseMutationResult<TData, TError, TVariables, TContext> = UseBaseMutationResult<TData, TError, TVariables, TContext>",
    "objectType": "type",
    "objectIdentifier": "react-query/UseMutationResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type UseMutationResult<TData, TError, TVariables, TContext> = UseBaseMutationResult<TData, TError, TVariables, TContext>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type UseMutationResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype UseMutationResult<TData, TError, TVariables, TContext> = UseBaseMutationResult<TData, TError, TVariables, TContext>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useQueries",
    "signature": "function useQueries(queries: readonly [...T extends [] ? [] : T extends [infer Head] ? [GetOptions<Head>] : T extends [infer Head, ...infer Tail] ? [...Tail] extends [] ? [] : [...Tail] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] : [......] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] :...): T extends [] ? [] : T extends [infer Head] ? [GetResults<Head>] : T extends [infer Head, ...infer Tail] ? [...Tail] extends [] ? [] : [...Tail] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] : [......] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] : [......] ext...",
    "objectType": "function",
    "objectIdentifier": "react-query/useQueries",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function useQueries(queries: readonly [...T extends [] ? [] : T extends [infer Head] ? [GetOptions<Head>] : T extends [infer Head, ...infer Tail] ? [...Tail] extends [] ? [] : [...Tail] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] : [......] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] :...): T extends [] ? [] : T extends [infer Head] ? [GetResults<Head>] : T extends [infer Head, ...infer Tail] ? [...Tail] extends [] ? [] : [...Tail] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] : [......] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] : [......] ext...",
    "newSource": "",
    "documentation": "",
    "description": "Removed function useQueries",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction useQueries(queries: readonly [...T extends [] ? [] : T extends [infer Head] ? [GetOptions<Head>] : T extends [infer Head, ...infer Tail] ? [...Tail] extends [] ? [] : [...Tail] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] : [......] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] :...): T extends [] ? [] : T extends [infer Head] ? [GetResults<Head>] : T extends [infer Head, ...infer Tail] ? [...Tail] extends [] ? [] : [...Tail] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] : [......] extends [...] ? [...] : [......] extends [...] ? [......] extends [] ? [] : [......] ext...\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useQuery",
    "signature": "function useQuery(options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>): UseQueryResult<TData, TError>",
    "objectType": "function",
    "objectIdentifier": "react-query/useQuery",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function useQuery(options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>): UseQueryResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed function useQuery",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction useQuery(options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>): UseQueryResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useQueryClient",
    "signature": "useQueryClient: () => QueryClient",
    "objectType": "variable",
    "objectIdentifier": "react-query/useQueryClient",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "useQueryClient: () => QueryClient",
    "newSource": "",
    "documentation": "",
    "description": "Removed variable useQueryClient",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nuseQueryClient: () => QueryClient\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useQueryErrorResetBoundary",
    "signature": "useQueryErrorResetBoundary: () => QueryErrorResetBoundaryValue",
    "objectType": "variable",
    "objectIdentifier": "react-query/useQueryErrorResetBoundary",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "useQueryErrorResetBoundary: () => QueryErrorResetBoundaryValue",
    "newSource": "",
    "documentation": "",
    "description": "Removed variable useQueryErrorResetBoundary",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nuseQueryErrorResetBoundary: () => QueryErrorResetBoundaryValue\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseQueryOptions",
    "signature": "interface UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>",
    "objectType": "interface",
    "objectIdentifier": "react-query/UseQueryOptions",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface UseQueryOptions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "UseQueryResult",
    "signature": "type UseQueryResult<TData, TError> = UseBaseQueryResult<TData, TError>",
    "objectType": "type",
    "objectIdentifier": "react-query/UseQueryResult",
    "packagePath": "react-query",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type UseQueryResult<TData, TError> = UseBaseQueryResult<TData, TError>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type UseQueryResult",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype UseQueryResult<TData, TError> = UseBaseQueryResult<TData, TError>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "current",
    "signature": "property current",
    "objectType": "property",
    "objectIdentifier": "@tanstack/react-query/legacy/HydrationBoundary/current",
    "packagePath": "legacy",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "property current",
    "documentation": "Property current",
    "description": "Added new property current",
    "message": "This is a added change.\n\nPackage type: javascript\n\nDocumentation:\n\nProperty current\n\nNew source code:\n\n```typescript\nproperty current\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "Property current",
    "packageType": "javascript"
  },
  {
    "objectName": "data",
    "signature": "property data",
    "objectType": "property",
    "objectIdentifier": "@tanstack/react-query/legacy/errorBoundaryUtils/data",
    "packagePath": "legacy",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "property data",
    "documentation": "Property data",
    "description": "Added new property data",
    "message": "This is a added change.\n\nPackage type: javascript\n\nDocumentation:\n\nProperty data\n\nNew source code:\n\n```typescript\nproperty data\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "Property data",
    "packageType": "javascript"
  },
  {
    "objectName": "gcTime",
    "signature": "property gcTime",
    "objectType": "property",
    "objectIdentifier": "@tanstack/react-query/legacy/suspense/gcTime",
    "packagePath": "legacy",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "property gcTime",
    "documentation": "Property gcTime",
    "description": "Added new property gcTime",
    "message": "This is a added change.\n\nPackage type: javascript\n\nDocumentation:\n\nProperty gcTime\n\nNew source code:\n\n```typescript\nproperty gcTime\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "Property gcTime",
    "packageType": "javascript"
  },
  {
    "objectName": "queryFn",
    "signature": "property queryFn",
    "objectType": "property",
    "objectIdentifier": "@tanstack/react-query/legacy/useSuspenseInfiniteQuery/queryFn",
    "packagePath": "legacy",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "property queryFn",
    "documentation": "Property queryFn",
    "description": "Added new property queryFn",
    "message": "This is a added change.\n\nPackage type: javascript\n\nDocumentation:\n\nProperty queryFn\n\nNew source code:\n\n```typescript\nproperty queryFn\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "Property queryFn",
    "packageType": "javascript"
  },
  {
    "objectName": "queryHash",
    "signature": "property queryHash",
    "objectType": "property",
    "objectIdentifier": "@tanstack/react-query/legacy/HydrationBoundary/queryHash",
    "packagePath": "legacy",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "property queryHash",
    "documentation": "Property queryHash",
    "description": "Added new property queryHash",
    "message": "This is a added change.\n\nPackage type: javascript\n\nDocumentation:\n\nProperty queryHash\n\nNew source code:\n\n```typescript\nproperty queryHash\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "Property queryHash",
    "packageType": "javascript"
  },
  {
    "objectName": "retryOnMount",
    "signature": "property retryOnMount",
    "objectType": "property",
    "objectIdentifier": "@tanstack/react-query/legacy/errorBoundaryUtils/retryOnMount",
    "packagePath": "legacy",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "property retryOnMount",
    "documentation": "Property retryOnMount",
    "description": "Added new property retryOnMount",
    "message": "This is a added change.\n\nPackage type: javascript\n\nDocumentation:\n\nProperty retryOnMount\n\nNew source code:\n\n```typescript\nproperty retryOnMount\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "Property retryOnMount",
    "packageType": "javascript"
  },
  {
    "objectName": "staleTime",
    "signature": "property staleTime",
    "objectType": "property",
    "objectIdentifier": "@tanstack/react-query/legacy/suspense/staleTime",
    "packagePath": "legacy",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "property staleTime",
    "documentation": "Property staleTime",
    "description": "Added new property staleTime",
    "message": "This is a added change.\n\nPackage type: javascript\n\nDocumentation:\n\nProperty staleTime\n\nNew source code:\n\n```typescript\nproperty staleTime\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "Property staleTime",
    "packageType": "javascript"
  }
]