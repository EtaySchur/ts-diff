[
  {
    "objectName": "FastFieldConfig",
    "sigånature": "interface FastFieldConfig<T>",
    "objectType": "interface",
    "objectIdentifier": "formik/FastFieldConfig",
    "packagePath": "formik",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface FastFieldConfig<T>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface FastFieldConfig",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface FastFieldConfig<T>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Field",
    "signature": "Field: React.ComponentType<any>",
    "objectType": "variable",
    "objectIdentifier": "formik/Field",
    "packagePath": "formik",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "Field: React.ComponentType<any>",
    "newSource": "",
    "documentation": "",
    "description": "Removed variable Field",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nField: React.ComponentType<any>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Formik",
    "signature": "class Formik",
    "objectType": "class",
    "objectIdentifier": "formik/Formik",
    "packagePath": "formik",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "class Formik",
    "newSource": "",
    "documentation": "",
    "description": "Removed class Formik",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nclass Formik\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikActions",
    "signature": "interface FormikActions<Values>",
    "objectType": "interface",
    "objectIdentifier": "formik/FormikActions",
    "packagePath": "formik",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "interface FormikActions<Values>",
    "newSource": "",
    "documentation": "",
    "description": "Removed interface FormikActions",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ninterface FormikActions<Values>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikContext",
    "signature": "type FormikContext<Values> = FormikProps<Values> & Pick<FormikConfig<Values>, 'validate' | 'validationSchema'>",
    "objectType": "type",
    "objectIdentifier": "formik/FormikContext",
    "packagePath": "formik",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "type FormikContext<Values> = FormikProps<Values> & Pick<FormikConfig<Values>, 'validate' | 'validationSchema'>",
    "newSource": "",
    "documentation": "",
    "description": "Removed type FormikContext",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\ntype FormikContext<Values> = FormikProps<Values> & Pick<FormikConfig<Values>, 'validate' | 'validationSchema'>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "makeCancelable",
    "signature": "function makeCancelable(promise: T): [T, () => void]",
    "objectType": "function",
    "objectIdentifier": "formik/makeCancelable",
    "packagePath": "formik",
    "changeType": "removed",
    "isBreaking": true,
    "oldSource": "function makeCancelable(promise: T): [T, () => void]",
    "newSource": "",
    "documentation": "",
    "description": "Removed function makeCancelable",
    "message": "This is a removed change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nOld source code:\n\n```typescript\nfunction makeCancelable(promise: T): [T, () => void]\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "ArrayHelpers",
    "signature": "interface ArrayHelpers<T>",
    "objectType": "interface",
    "objectIdentifier": "formik/ArrayHelpers",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "interface ArrayHelpers",
    "newSource": "interface ArrayHelpers<T>",
    "documentation": "",
    "description": "Changed signature of interface ArrayHelpers",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ninterface ArrayHelpers\n\n// New version:\n\ninterface ArrayHelpers<T>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "CompositeComponent",
    "signature": "type CompositeComponent<P> = React.ComponentClass<P> | React.FunctionComponent<P>",
    "objectType": "type",
    "objectIdentifier": "formik/CompositeComponent",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "type CompositeComponent<P> = React.ComponentClass<P> | React.StatelessComponent<P>",
    "newSource": "type CompositeComponent<P> = React.ComponentClass<P> | React.FunctionComponent<P>",
    "documentation": "",
    "description": "Changed signature of type CompositeComponent",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ntype CompositeComponent<P> = React.ComponentClass<P> | React.StatelessComponent<P>\n\n// New version:\n\ntype CompositeComponent<P> = React.ComponentClass<P> | React.FunctionComponent<P>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "connect",
    "signature": "function connect(Comp: ComponentType<OuterProps & { formik: FormikContextType<Values>; }>): FC<OuterProps> & NonReactStatics<ComponentClass<OuterProps & { formik: FormikContextType<Values>; }, any>, {}>",
    "objectType": "function",
    "objectIdentifier": "formik/connect",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "function connect(Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values>; }>): React.ComponentType<OuterProps>",
    "newSource": "function connect(Comp: ComponentType<OuterProps & { formik: FormikContextType<Values>; }>): FC<OuterProps> & NonReactStatics<ComponentClass<OuterProps & { formik: FormikContextType<Values>; }, any>, {}>",
    "documentation": "",
    "description": "Changed signature of function connect",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nReason: Parameter type changed from React.ComponentType<OuterProps & { formik to ComponentType<OuterProps & { formik\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nfunction connect(Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values>; }>): React.ComponentType<OuterProps>\n\n// New version:\n\nfunction connect(Comp: ComponentType<OuterProps & { formik: FormikContextType<Values>; }>): FC<OuterProps> & NonReactStatics<ComponentClass<OuterProps & { formik: FormikContextType<Values>; }, any>, {}>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript",
    "breakingReason": "Parameter type changed from React.ComponentType<OuterProps & { formik to ComponentType<OuterProps & { formik"
  },
  {
    "objectName": "ErrorMessage",
    "signature": "ErrorMessage: FC<ErrorMessageProps> & NonReactStatics<ComponentClass<ErrorMessageProps & { formik: FormikContextType<ErrorMessageProps & { formik: FormikContextType<any>; }>; }, any>, {}>",
    "objectType": "variable",
    "objectIdentifier": "formik/ErrorMessage",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "ErrorMessage: React.ComponentType<ErrorMessageProps>",
    "newSource": "ErrorMessage: FC<ErrorMessageProps> & NonReactStatics<ComponentClass<ErrorMessageProps & { formik: FormikContextType<ErrorMessageProps & { formik: FormikContextType<any>; }>; }, any>, {}>",
    "documentation": "",
    "description": "Changed signature of variable ErrorMessage",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nErrorMessage: React.ComponentType<ErrorMessageProps>\n\n// New version:\n\nErrorMessage: FC<ErrorMessageProps> & NonReactStatics<ComponentClass<ErrorMessageProps & { formik: FormikContextType<ErrorMessageProps & { formik: FormikContextType<any>; }>; }, any>, {}>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FastField",
    "signature": "FastField: FC<any> & NonReactStatics<ComponentClass<any, any>, {}>",
    "objectType": "variable",
    "objectIdentifier": "formik/FastField",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "FastField: React.ComponentType<any>",
    "newSource": "FastField: FC<any> & NonReactStatics<ComponentClass<any, any>, {}>",
    "documentation": "",
    "description": "Changed signature of variable FastField",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nFastField: React.ComponentType<any>\n\n// New version:\n\nFastField: FC<any> & NonReactStatics<ComponentClass<any, any>, {}>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FieldArray",
    "signature": "FieldArray: FC<FieldArrayConfig> & NonReactStatics<ComponentClass<{ name: string; validateOnChange?: boolean; } & SharedRenderProps<FieldArrayRenderProps> & { ...; }, any>, {}>",
    "objectType": "variable",
    "objectIdentifier": "formik/FieldArray",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "FieldArray: React.ComponentType<FieldArrayConfig>",
    "newSource": "FieldArray: FC<FieldArrayConfig> & NonReactStatics<ComponentClass<{ name: string; validateOnChange?: boolean; } & SharedRenderProps<FieldArrayRenderProps> & { ...; }, any>, {}>",
    "documentation": "",
    "description": "Changed signature of variable FieldArray",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nFieldArray: React.ComponentType<FieldArrayConfig>\n\n// New version:\n\nFieldArray: FC<FieldArrayConfig> & NonReactStatics<ComponentClass<{ name: string; validateOnChange?: boolean; } & SharedRenderProps<FieldArrayRenderProps> & { ...; }, any>, {}>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FieldArrayConfig",
    "signature": "type FieldArrayConfig = { /** Really the path to the array field to be updated */ name: string; /** Should field array validate the form AFTER array updates/changes? */ validateOnChange?: boolean; } & SharedRenderProps<FieldArrayRenderProps>",
    "objectType": "type",
    "objectIdentifier": "formik/FieldArrayConfig",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "type FieldArrayConfig = { name: string; validateOnChange?: boolean; } & SharedRenderProps<FieldArrayRenderProps>",
    "newSource": "type FieldArrayConfig = { /** Really the path to the array field to be updated */ name: string; /** Should field array validate the form AFTER array updates/changes? */ validateOnChange?: boolean; } & SharedRenderProps<FieldArrayRenderProps>",
    "documentation": "",
    "description": "Changed signature of type FieldArrayConfig",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ntype FieldArrayConfig = { name: string; validateOnChange?: boolean; } & SharedRenderProps<FieldArrayRenderProps>\n\n// New version:\n\ntype FieldArrayConfig = { /** Really the path to the array field to be updated */ name: string; /** Should field array validate the form AFTER array updates/changes? */ validateOnChange?: boolean; } & SharedRenderProps<FieldArrayRenderProps>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FieldAttributes",
    "signature": "type FieldAttributes<T> = { className?: string; } & GenericFieldHTMLAttributes & FieldConfig<T> & T & { name: string; }",
    "objectType": "type",
    "objectIdentifier": "formik/FieldAttributes",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "type FieldAttributes<T> = GenericFieldHTMLAttributes & FieldConfig & T",
    "newSource": "type FieldAttributes<T> = { className?: string; } & GenericFieldHTMLAttributes & FieldConfig<T> & T & { name: string; }",
    "documentation": "",
    "description": "Changed signature of type FieldAttributes",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ntype FieldAttributes<T> = GenericFieldHTMLAttributes & FieldConfig & T\n\n// New version:\n\ntype FieldAttributes<T> = { className?: string; } & GenericFieldHTMLAttributes & FieldConfig<T> & T & { name: string; }\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FieldConfig",
    "signature": "interface FieldConfig<V>",
    "objectType": "interface",
    "objectIdentifier": "formik/FieldConfig",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "interface FieldConfig",
    "newSource": "interface FieldConfig<V>",
    "documentation": "",
    "description": "Changed signature of interface FieldConfig",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ninterface FieldConfig\n\n// New version:\n\ninterface FieldConfig<V>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FieldProps",
    "signature": "interface FieldProps<V, FormValues>",
    "objectType": "interface",
    "objectIdentifier": "formik/FieldProps",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "interface FieldProps<V>",
    "newSource": "interface FieldProps<V, FormValues>",
    "documentation": "",
    "description": "Changed signature of interface FieldProps",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ninterface FieldProps<V>\n\n// New version:\n\ninterface FieldProps<V, FormValues>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Form",
    "signature": "Form: ForwardRefExoticComponent<Omit<DetailedHTMLProps<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>, \"ref\"> & RefAttributes<...>>",
    "objectType": "variable",
    "objectIdentifier": "formik/Form",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "Form: React.ComponentType<Pick<React.FormHTMLAttributes<HTMLFormElement>, \"color\" | \"hidden\" | \"dir\" | \"slot\" | \"style\" | \"title\" | \"children\" | \"name\" | \"className\" | \"autoComplete\" | \"placeholder\" | \"onChange\" | ... 242 more ... | \"target\">>",
    "newSource": "Form: ForwardRefExoticComponent<Omit<DetailedHTMLProps<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>, \"ref\"> & RefAttributes<...>>",
    "documentation": "",
    "description": "Changed signature of variable Form",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nForm: React.ComponentType<Pick<React.FormHTMLAttributes<HTMLFormElement>, \"color\" | \"hidden\" | \"dir\" | \"slot\" | \"style\" | \"title\" | \"children\" | \"name\" | \"className\" | \"autoComplete\" | \"placeholder\" | \"onChange\" | ... 242 more ... | \"target\">>\n\n// New version:\n\nForm: ForwardRefExoticComponent<Omit<DetailedHTMLProps<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>, \"ref\"> & RefAttributes<...>>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikBag",
    "signature": "type FormikBag<P, V> = { props: P; } & FormikHelpers<V>",
    "objectType": "type",
    "objectIdentifier": "formik/FormikBag",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "type FormikBag<P, V> = { props: P; } & FormikActions<V>",
    "newSource": "type FormikBag<P, V> = { props: P; } & FormikHelpers<V>",
    "documentation": "",
    "description": "Changed signature of type FormikBag",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ntype FormikBag<P, V> = { props: P; } & FormikActions<V>\n\n// New version:\n\ntype FormikBag<P, V> = { props: P; } & FormikHelpers<V>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikConsumer",
    "signature": "FormikConsumer: Consumer<FormikContextType<any>>",
    "objectType": "variable",
    "objectIdentifier": "formik/FormikConsumer",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "FormikConsumer: React.ExoticComponent<React.ConsumerProps<FormikContext<any>>>",
    "newSource": "FormikConsumer: Consumer<FormikContextType<any>>",
    "documentation": "",
    "description": "Changed signature of variable FormikConsumer",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nFormikConsumer: React.ExoticComponent<React.ConsumerProps<FormikContext<any>>>\n\n// New version:\n\nFormikConsumer: Consumer<FormikContextType<any>>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikErrors",
    "signature": "type FormikErrors<Values> = { [K in keyof Values]?: Values[K] extends any[] ? Values[K][number] extends object ? FormikErrors<Values[K][number]>[] | string | string[] : string | string[] : Values[K] extends object ? FormikErrors<Values[K]> : string; }",
    "objectType": "type",
    "objectIdentifier": "formik/FormikErrors",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "type FormikErrors<Values> = { [K in keyof Values]?: Values[K] extends object ? FormikErrors<Values[K]> : string; }",
    "newSource": "type FormikErrors<Values> = { [K in keyof Values]?: Values[K] extends any[] ? Values[K][number] extends object ? FormikErrors<Values[K][number]>[] | string | string[] : string | string[] : Values[K] extends object ? FormikErrors<Values[K]> : string; }",
    "documentation": "",
    "description": "Changed signature of type FormikErrors",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ntype FormikErrors<Values> = { [K in keyof Values]?: Values[K] extends object ? FormikErrors<Values[K]> : string; }\n\n// New version:\n\ntype FormikErrors<Values> = { [K in keyof Values]?: Values[K] extends any[] ? Values[K][number] extends object ? FormikErrors<Values[K][number]>[] | string | string[] : string | string[] : Values[K] extends object ? FormikErrors<Values[K]> : string; }\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikProps",
    "signature": "type FormikProps<Values> = FormikSharedConfig & FormikState<Values> & FormikHelpers<Values> & FormikHandlers & FormikComputedProps<Values> & FormikRegistration & { submitForm: () => Promise<any>; }",
    "objectType": "type",
    "objectIdentifier": "formik/FormikProps",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "type FormikProps<Values> = FormikSharedConfig & FormikState<Values> & FormikActions<Values> & FormikHandlers & FormikComputedProps<Values> & FormikRegistration",
    "newSource": "type FormikProps<Values> = FormikSharedConfig & FormikState<Values> & FormikHelpers<Values> & FormikHandlers & FormikComputedProps<Values> & FormikRegistration & { submitForm: () => Promise<any>; }",
    "documentation": "",
    "description": "Changed signature of type FormikProps",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ntype FormikProps<Values> = FormikSharedConfig & FormikState<Values> & FormikActions<Values> & FormikHandlers & FormikComputedProps<Values> & FormikRegistration\n\n// New version:\n\ntype FormikProps<Values> = FormikSharedConfig & FormikState<Values> & FormikHelpers<Values> & FormikHandlers & FormikComputedProps<Values> & FormikRegistration & { submitForm: () => Promise<any>; }\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikProvider",
    "signature": "FormikProvider: Provider<FormikContextType<any>>",
    "objectType": "variable",
    "objectIdentifier": "formik/FormikProvider",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "FormikProvider: React.ProviderExoticComponent<React.ProviderProps<FormikContext<any>>>",
    "newSource": "FormikProvider: Provider<FormikContextType<any>>",
    "documentation": "",
    "description": "Changed signature of variable FormikProvider",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nFormikProvider: React.ProviderExoticComponent<React.ProviderProps<FormikContext<any>>>\n\n// New version:\n\nFormikProvider: Provider<FormikContextType<any>>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikTouched",
    "signature": "type FormikTouched<Values> = { [K in keyof Values]?: Values[K] extends any[] ? Values[K][number] extends object ? FormikTouched<Values[K][number]>[] : boolean : Values[K] extends object ? FormikTouched<Values[K]> : boolean; }",
    "objectType": "type",
    "objectIdentifier": "formik/FormikTouched",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "type FormikTouched<Values> = { [K in keyof Values]?: Values[K] extends object ? FormikTouched<Values[K]> : boolean; }",
    "newSource": "type FormikTouched<Values> = { [K in keyof Values]?: Values[K] extends any[] ? Values[K][number] extends object ? FormikTouched<Values[K][number]>[] : boolean : Values[K] extends object ? FormikTouched<Values[K]> : boolean; }",
    "documentation": "",
    "description": "Changed signature of type FormikTouched",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ntype FormikTouched<Values> = { [K in keyof Values]?: Values[K] extends object ? FormikTouched<Values[K]> : boolean; }\n\n// New version:\n\ntype FormikTouched<Values> = { [K in keyof Values]?: Values[K] extends any[] ? Values[K][number] extends object ? FormikTouched<Values[K][number]>[] : boolean : Values[K] extends object ? FormikTouched<Values[K]> : boolean; }\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "GenericFieldHTMLAttributes",
    "signature": "type GenericFieldHTMLAttributes = JSX.IntrinsicElements['input'] | JSX.IntrinsicElements['select'] | JSX.IntrinsicElements['textarea']",
    "objectType": "type",
    "objectIdentifier": "formik/GenericFieldHTMLAttributes",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "type GenericFieldHTMLAttributes = React.InputHTMLAttributes<HTMLInputElement> | React.SelectHTMLAttributes<HTMLSelectElement> | React.TextareaHTMLAttributes<HTMLTextAreaElement>",
    "newSource": "type GenericFieldHTMLAttributes = JSX.IntrinsicElements['input'] | JSX.IntrinsicElements['select'] | JSX.IntrinsicElements['textarea']",
    "documentation": "",
    "description": "Changed signature of type GenericFieldHTMLAttributes",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ntype GenericFieldHTMLAttributes = React.InputHTMLAttributes<HTMLInputElement> | React.SelectHTMLAttributes<HTMLSelectElement> | React.TextareaHTMLAttributes<HTMLTextAreaElement>\n\n// New version:\n\ntype GenericFieldHTMLAttributes = JSX.IntrinsicElements['input'] | JSX.IntrinsicElements['select'] | JSX.IntrinsicElements['textarea']\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "insert",
    "signature": "insert: <T>(arrayLike: ArrayLike<T>, index: number, value: T) => unknown[]",
    "objectType": "variable",
    "objectIdentifier": "formik/insert",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "insert: (array: any[], index: number, value: any) => any[]",
    "newSource": "insert: <T>(arrayLike: ArrayLike<T>, index: number, value: T) => unknown[]",
    "documentation": "",
    "description": "Changed signature of variable insert",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\ninsert: (array: any[], index: number, value: any) => any[]\n\n// New version:\n\ninsert: <T>(arrayLike: ArrayLike<T>, index: number, value: T) => unknown[]\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "isInputEvent",
    "signature": "isInputEvent: (value: any) => value is SyntheticEvent<any, Event>",
    "objectType": "variable",
    "objectIdentifier": "formik/isInputEvent",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "isInputEvent: (value: any) => value is React.SyntheticEvent<any>",
    "newSource": "isInputEvent: (value: any) => value is SyntheticEvent<any, Event>",
    "documentation": "",
    "description": "Changed signature of variable isInputEvent",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nisInputEvent: (value: any) => value is React.SyntheticEvent<any>\n\n// New version:\n\nisInputEvent: (value: any) => value is SyntheticEvent<any, Event>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "isObject",
    "signature": "isObject: (obj: any) => obj is Object",
    "objectType": "variable",
    "objectIdentifier": "formik/isObject",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "isObject: (obj: any) => boolean",
    "newSource": "isObject: (obj: any) => obj is Object",
    "documentation": "",
    "description": "Changed signature of variable isObject",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nisObject: (obj: any) => boolean\n\n// New version:\n\nisObject: (obj: any) => obj is Object\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "move",
    "signature": "move: <T>(array: T[], from: number, to: number) => unknown[]",
    "objectType": "variable",
    "objectIdentifier": "formik/move",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "move: (array: any[], from: number, to: number) => any[]",
    "newSource": "move: <T>(array: T[], from: number, to: number) => unknown[]",
    "documentation": "",
    "description": "Changed signature of variable move",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nmove: (array: any[], from: number, to: number) => any[]\n\n// New version:\n\nmove: <T>(array: T[], from: number, to: number) => unknown[]\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "replace",
    "signature": "replace: <T>(arrayLike: ArrayLike<T>, index: number, value: T) => unknown[]",
    "objectType": "variable",
    "objectIdentifier": "formik/replace",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "replace: (array: any[], index: number, value: any) => any[]",
    "newSource": "replace: <T>(arrayLike: ArrayLike<T>, index: number, value: T) => unknown[]",
    "documentation": "",
    "description": "Changed signature of variable replace",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nreplace: (array: any[], index: number, value: any) => any[]\n\n// New version:\n\nreplace: <T>(arrayLike: ArrayLike<T>, index: number, value: T) => unknown[]\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "swap",
    "signature": "swap: <T>(arrayLike: ArrayLike<T>, indexA: number, indexB: number) => unknown[]",
    "objectType": "variable",
    "objectIdentifier": "formik/swap",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "swap: (array: any[], indexA: number, indexB: number) => any[]",
    "newSource": "swap: <T>(arrayLike: ArrayLike<T>, indexA: number, indexB: number) => unknown[]",
    "documentation": "",
    "description": "Changed signature of variable swap",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nswap: (array: any[], indexA: number, indexB: number) => any[]\n\n// New version:\n\nswap: <T>(arrayLike: ArrayLike<T>, indexA: number, indexB: number) => unknown[]\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "withFormik",
    "signature": "function withFormik({ mapPropsToValues, ...config }: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<OuterProps, OuterProps & FormikSharedConfig<{}> & FormikState<Values> & FormikHelpers<Values> & FormikHandlers & FormikComputedProps<...> & FormikRegistration & { ...; }>",
    "objectType": "function",
    "objectIdentifier": "formik/withFormik",
    "packagePath": "formik",
    "changeType": "modified",
    "isBreaking": true,
    "oldSource": "function withFormik({ mapPropsToValues, ...config }: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<OuterProps, OuterProps & FormikSharedConfig<{}> & FormikState<Values> & FormikActions<Values> & FormikHandlers & FormikComputedProps<...> & FormikRegistration>",
    "newSource": "function withFormik({ mapPropsToValues, ...config }: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<OuterProps, OuterProps & FormikSharedConfig<{}> & FormikState<Values> & FormikHelpers<Values> & FormikHandlers & FormikComputedProps<...> & FormikRegistration & { ...; }>",
    "documentation": "",
    "description": "Changed signature of function withFormik",
    "message": "This is a modified change.\n\nPackage type: typescript\n\n⚠️ This is a breaking change.\n\nReason: Return type changed from ComponentDecorator<OuterProps, OuterProps & FormikSharedConfig<{}> & FormikState<Values> & FormikActions<Values> & FormikHandlers & FormikComputedProps<...> & FormikRegistration> to ComponentDecorator<OuterProps, OuterProps & FormikSharedConfig<{}> & FormikState<Values> & FormikHelpers<Values> & FormikHandlers & FormikComputedProps<...> & FormikRegistration & { ...; }>\n\nChanges in source code:\n\n```typescript\n\n// Old version:\n\nfunction withFormik({ mapPropsToValues, ...config }: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<OuterProps, OuterProps & FormikSharedConfig<{}> & FormikState<Values> & FormikActions<Values> & FormikHandlers & FormikComputedProps<...> & FormikRegistration>\n\n// New version:\n\nfunction withFormik({ mapPropsToValues, ...config }: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<OuterProps, OuterProps & FormikSharedConfig<{}> & FormikState<Values> & FormikHelpers<Values> & FormikHandlers & FormikComputedProps<...> & FormikRegistration & { ...; }>\n\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript",
    "breakingReason": "Return type changed from ComponentDecorator<OuterProps, OuterProps & FormikSharedConfig<{}> & FormikState<Values> & FormikActions<Values> & FormikHandlers & FormikComputedProps<...> & FormikRegistration> to ComponentDecorator<OuterProps, OuterProps & FormikSharedConfig<{}> & FormikState<Values> & FormikHelpers<Values> & FormikHandlers & FormikComputedProps<...> & FormikRegistration & { ...; }>"
  },
  {
    "objectName": "FastFieldConfig",
    "signature": "type FastFieldConfig<T> = FieldConfig & { /** Override FastField's default shouldComponentUpdate */ shouldUpdate?: (nextProps: T & GenericFieldHTMLAttributes, props: {}) => boolean; }",
    "objectType": "type",
    "objectIdentifier": "formik/FastFieldConfig",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "type FastFieldConfig<T> = FieldConfig & { /** Override FastField's default shouldComponentUpdate */ shouldUpdate?: (nextProps: T & GenericFieldHTMLAttributes, props: {}) => boolean; }",
    "documentation": "",
    "description": "Added new type FastFieldConfig",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\ntype FastFieldConfig<T> = FieldConfig & { /** Override FastField's default shouldComponentUpdate */ shouldUpdate?: (nextProps: T & GenericFieldHTMLAttributes, props: {}) => boolean; }\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Field",
    "signature": "function Field({ validate, name, render, children, as: is, // `as` is reserved in typescript lol component, className, ...props }: any): any",
    "objectType": "function",
    "objectIdentifier": "formik/Field",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "function Field({ validate, name, render, children, as: is, // `as` is reserved in typescript lol component, className, ...props }: any): any",
    "documentation": "",
    "description": "Added new function Field",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\nfunction Field({ validate, name, render, children, as: is, // `as` is reserved in typescript lol component, className, ...props }: any): any\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FieldHelperProps",
    "signature": "interface FieldHelperProps<Value>",
    "objectType": "interface",
    "objectIdentifier": "formik/FieldHelperProps",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "interface FieldHelperProps<Value>",
    "documentation": "",
    "description": "Added new interface FieldHelperProps",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\ninterface FieldHelperProps<Value>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FieldHookConfig",
    "signature": "type FieldHookConfig<T> = GenericFieldHTMLAttributes & FieldConfig<T>",
    "objectType": "type",
    "objectIdentifier": "formik/FieldHookConfig",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "type FieldHookConfig<T> = GenericFieldHTMLAttributes & FieldConfig<T>",
    "documentation": "",
    "description": "Added new type FieldHookConfig",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\ntype FieldHookConfig<T> = GenericFieldHTMLAttributes & FieldConfig<T>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FieldInputProps",
    "signature": "interface FieldInputProps<Value>",
    "objectType": "interface",
    "objectIdentifier": "formik/FieldInputProps",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "interface FieldInputProps<Value>",
    "documentation": "",
    "description": "Added new interface FieldInputProps",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\ninterface FieldInputProps<Value>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FieldMetaProps",
    "signature": "interface FieldMetaProps<Value>",
    "objectType": "interface",
    "objectIdentifier": "formik/FieldMetaProps",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "interface FieldMetaProps<Value>",
    "documentation": "",
    "description": "Added new interface FieldMetaProps",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\ninterface FieldMetaProps<Value>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FieldValidator",
    "signature": "type FieldValidator = (value: any) => string | void | Promise<string | void>",
    "objectType": "type",
    "objectIdentifier": "formik/FieldValidator",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "type FieldValidator = (value: any) => string | void | Promise<string | void>",
    "documentation": "",
    "description": "Added new type FieldValidator",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\ntype FieldValidator = (value: any) => string | void | Promise<string | void>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "Formik",
    "signature": "function Formik(props: FormikConfig<Values> & ExtraProps): Element",
    "objectType": "function",
    "objectIdentifier": "formik/Formik",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "function Formik(props: FormikConfig<Values> & ExtraProps): Element",
    "documentation": "",
    "description": "Added new function Formik",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\nfunction Formik(props: FormikConfig<Values> & ExtraProps): Element\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikContext",
    "signature": "FormikContext: Context<FormikContextType<any>>",
    "objectType": "variable",
    "objectIdentifier": "formik/FormikContext",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "FormikContext: Context<FormikContextType<any>>",
    "documentation": "",
    "description": "Added new variable FormikContext",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\nFormikContext: Context<FormikContextType<any>>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikContextType",
    "signature": "type FormikContextType<Values> = FormikProps<Values> & Pick<FormikConfig<Values>, 'validate' | 'validationSchema'>",
    "objectType": "type",
    "objectIdentifier": "formik/FormikContextType",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "type FormikContextType<Values> = FormikProps<Values> & Pick<FormikConfig<Values>, 'validate' | 'validationSchema'>",
    "documentation": "",
    "description": "Added new type FormikContextType",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\ntype FormikContextType<Values> = FormikProps<Values> & Pick<FormikConfig<Values>, 'validate' | 'validationSchema'>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "FormikHelpers",
    "signature": "interface FormikHelpers<Values>",
    "objectType": "interface",
    "objectIdentifier": "formik/FormikHelpers",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "interface FormikHelpers<Values>",
    "documentation": "",
    "description": "Added new interface FormikHelpers",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\ninterface FormikHelpers<Values>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "isEmptyArray",
    "signature": "isEmptyArray: (value?: any) => boolean",
    "objectType": "variable",
    "objectIdentifier": "formik/isEmptyArray",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "isEmptyArray: (value?: any) => boolean",
    "documentation": "",
    "description": "Added new variable isEmptyArray",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\nisEmptyArray: (value?: any) => boolean\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "prepareDataForValidation",
    "signature": "function prepareDataForValidation(values: T): FormikValues",
    "objectType": "function",
    "objectIdentifier": "formik/prepareDataForValidation",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "function prepareDataForValidation(values: T): FormikValues",
    "documentation": "",
    "description": "Added new function prepareDataForValidation",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\nfunction prepareDataForValidation(values: T): FormikValues\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useField",
    "signature": "function useField(propsOrFieldName: any): [FieldInputProps<Val>, FieldMetaProps<Val>, FieldHelperProps<Val>]",
    "objectType": "function",
    "objectIdentifier": "formik/useField",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "function useField(propsOrFieldName: any): [FieldInputProps<Val>, FieldMetaProps<Val>, FieldHelperProps<Val>]",
    "documentation": "",
    "description": "Added new function useField",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\nfunction useField(propsOrFieldName: any): [FieldInputProps<Val>, FieldMetaProps<Val>, FieldHelperProps<Val>]\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useFormik",
    "signature": "function useFormik({ validateOnChange, validateOnBlur, validateOnMount, isInitialValid, enableReinitialize, onSubmit, ...rest }: FormikConfig<Values>): { initialValues: Values; initialErrors: FormikErrors<unknown>; initialTouched: FormikTouched<unknown>; initialStatus: any; handleBlur: { (e: FocusEvent<any, Element>): void; <T = any>(fieldOrEvent: T): T extends string ? (e: any) => void : void; }; ... 32 more ...; submitCount: number; }",
    "objectType": "function",
    "objectIdentifier": "formik/useFormik",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "function useFormik({ validateOnChange, validateOnBlur, validateOnMount, isInitialValid, enableReinitialize, onSubmit, ...rest }: FormikConfig<Values>): { initialValues: Values; initialErrors: FormikErrors<unknown>; initialTouched: FormikTouched<unknown>; initialStatus: any; handleBlur: { (e: FocusEvent<any, Element>): void; <T = any>(fieldOrEvent: T): T extends string ? (e: any) => void : void; }; ... 32 more ...; submitCount: number; }",
    "documentation": "",
    "description": "Added new function useFormik",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\nfunction useFormik({ validateOnChange, validateOnBlur, validateOnMount, isInitialValid, enableReinitialize, onSubmit, ...rest }: FormikConfig<Values>): { initialValues: Values; initialErrors: FormikErrors<unknown>; initialTouched: FormikTouched<unknown>; initialStatus: any; handleBlur: { (e: FocusEvent<any, Element>): void; <T = any>(fieldOrEvent: T): T extends string ? (e: any) => void : void; }; ... 32 more ...; submitCount: number; }\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  },
  {
    "objectName": "useFormikContext",
    "signature": "function useFormikContext(): FormikContextType<Values>",
    "objectType": "function",
    "objectIdentifier": "formik/useFormikContext",
    "packagePath": "formik",
    "changeType": "added",
    "isBreaking": false,
    "oldSource": "",
    "newSource": "function useFormikContext(): FormikContextType<Values>",
    "documentation": "",
    "description": "Added new function useFormikContext",
    "message": "This is a added change.\n\nPackage type: typescript\n\nNew source code:\n\n```typescript\nfunction useFormikContext(): FormikContextType<Values>\n```",
    "jsDoc": "",
    "comments": "",
    "readmeDoc": "",
    "examples": [],
    "sourceComments": "",
    "fullDocumentation": "",
    "packageType": "typescript"
  }
]